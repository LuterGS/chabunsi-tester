여기서는 GKE 에 statefulset 을 이용하여 fixed 된 스토리지와 headless 서비스의 조합으로 mongodb 를 띄우는 방법을 알려줍니다.

1. GKE 에 배포 및 관리를 하기 위해서는 service account 와 role 을 설정하고,
   해당 service account 에 지정해준 role 을 binding 해야 합니다.

2. 먼저, service_account.yaml 을 보시면, 이름이 monitoring-service-account 인 service account 를 지정해줬습니다.

3. 해당 service account 를 적용하기 위해 kubectl apply -f service_account.yaml 을 합니다.

4. 이후, 해당 service account 에 적용할 role 을 만듭니다. (cluster_role.yaml 을 참고해주세요)

5. 모든 role 은 rbac 을 기반으로 이루어집니다. 이름은 cluster-watcher 고, 각각의 resource 에 따라 다른 권한을 부여했습니다.

6. 해당 role 을 kubernetes 에 바인딩합니다. (kubectl apply -f cluster_role.yaml)

7. 이후, statefulset 으로 구성한 mongodb 를 배포합니다. (mongo-statefulset.yaml)

8. 14 번째 줄 이전까지는 headless service 작성 부분입니다. clusterIP 가 none 으로 되어 있습니다.

9. 이후 부분은 statefulset 설정 부분입니다. replicas 를 이용하여 replica 개수를 설정하고,
   spec.spec 밑에 아까전에 설정한 serviceAccountName 을 넣어줍니다.
   이후 컨테이너 부분엔 쓸 컨테이너를 넣어줍니다. args 를 통해 커맨드를 입력해줄 수 있습니다.
   이후 volumeClaimTemplates 를 통해 state 한 저장소를 만들고, 해당 부분을 spec.spec 에 정의합니다.

10. 해당 yaml 을 배포합니다. (kubectl apply -f mongo-statefulset.yaml)

11. 배포가 완료되면, 직접 커맨드를 통해 primary 에서 replica 를 설정해야 합니다.

12. 배포가 완료되면, ip 를 알아야 하기 때문에 kubectl describe pod mongo-0 을 통해 mongo-0 의 내부 ip 를 알아냅니다.

14. 똑같은 방법으로 kubectl describe pod mongo-1 을 통해 mongo-1 의 내부 ip 를 알아냅니다.

15. kubectl exec -ti mongo-0 -- mongo   를 입력해 replica set 중 첫 번째로 선언된 pod 에 들어갑니다.

16. 이 명령어를 입력해 replica 를 설정합니다.

   1. rs.initiate()
   2. rs.reconfig({_id: "rs0", members: [
       { _id: 0, host : "(mongo-0의 IP):27017" },
       { _id: 1, host : "(mongo-1의 IP):27017" }
      ]});

17. rs.status() 명령어를 통해 정상적으로 작동하는 지 확인합니다.

tests